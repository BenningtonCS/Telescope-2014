Only in srtnver2: a.out
diff srtnver2/cal.c srtnver3/cal.c
50,51c50,56
<         polyfitr(NPOLY, d1.nfreq, bbspec, wtt, bspec);
< //                  for(k=0;k < d1.nfreq; k++) bspec[k] = bbspec[k];
---
>         if (d1.npoly > NPOLY)
>             d1.npoly = NPOLY;
>         polyfitr(d1.npoly, d1.nfreq, bbspec, wtt, bspec);
> //      for(k=0;k<d1.nfreq;k+=10) printf("k %d wtt %f bbspec %f\n",k,wtt[k],bbspec[k]);
>         if (d1.npoly == 1)
>             for (k = 0; k < d1.nfreq; k++)
>                 bspec[k] = bbspec[k];
64c69
<             d1.tsys = 290.0 / (d1.yfac - 1.0); // put in Tsys
---
>             d1.tsys = (d1.tcal - d1.yfac * 3.0) / (d1.yfac - 1.0); // put in Tsys  assumes CMB of 3 K
67c72
<         if (d1.caldone == 0 && d1.calmode != 2)
---
>         if (d1.caldone == 0 && d1.calmode != 2 && d1.calmode != 3)
109c114
<         freq = (double) (i - d1.f1 * d1.nfreq) / ((double) (d1.fc * nfreq));
---
>         freq = (double) (i - d1.fc * d1.nfreq) / ((double) (d1.fc * nfreq));
145c150
<         freq = (double) (i - d1.f1 * d1.nfreq) / ((double) (d1.fc * nfreq));
---
>         freq = (double) (i - d1.fc * d1.nfreq) / ((double) (d1.fc * nfreq));
diff srtnver2/cat.c srtnver3/cat.c
58a59,62
>             if (kmatch(buf, "NBLOCK "))
>                 sscanf(buf, "%*s %d", &d1.nblk);
>             if (kmatch(buf, "NUMPOLY "))
>                 sscanf(buf, "%*s %d", &d1.npoly);
96a101,102
>             if (kmatch(buf, "RESTFREQ "))
>                 sscanf(buf, "%*s %lf", &d1.restfreq);
diff srtnver2/cmdfl.c srtnver3/cmdfl.c
140c140
<                 if (strstr(str, "roff"))
---
>                 if (strstr(str, "roff")) {
141a142,148
>                     if (d1.displ) {
>                         color.green = 0xffff;
>                         color.red = 0xffff;
>                         color.blue = 0xffff;
>                         gtk_widget_modify_bg(button_record, GTK_STATE_NORMAL, &color);
>                     }
>                 }
Only in srtnver3: cmd.txt
diff srtnver2/d1cons.h srtnver3/d1cons.h
6c6
< #define NPOLY 15
---
> #define NPOLY 25
Only in srtnver2: d1global.h
diff srtnver2/d1glob.h srtnver3/d1glob.h
3,4c3,4
< extern double xloc[], yloc[], bx[], by[], polyb[], pwr, pwrst, pwrprev;
< extern float spec[], avspec[], aavspec[], fft1[], scanpwr[], avspecon[], avspecoff[], bspec[], bbspec[];
---
> extern double pwr, pwrst, pwrprev;
> extern float spec[], avspec[], aavspec[], scanpwr[], avspecon[], avspecoff[], bspec[], bbspec[];
7d6
< extern float aacos[], aasin[];
diff srtnver2/d1proto.h srtnver3/d1proto.h
26d25
< double radio (double);
30d28
< int getspectra (int, int);
78c76
< void Init_Device();
---
> void Init_Device(int);
diff srtnver2/d1typ.h srtnver3/d1typ.h
17c17
<     pwroff, pwron, bswpwr, noisecal, avbsw, calpwr, yfac, f1, fc, f2, fbw, tcal, freqcorr, rfisigma;
---
>     pwroff, pwron, bswpwr, noisecal, avbsw, calpwr, yfac, f1, fc, f2, fbw, tcal, freqcorr, rfisigma, azprev, elprev;
42c42
<     helpwindow,vwindow,plot,obsn,nrfi;
---
>     helpwindow,vwindow,plot,obsn,nrfi,dongle,npoly;
55d54
<   char savmess[256];
diff srtnver2/disp.c srtnver3/disp.c
83a84
>     n = d1.nfreq;
307a309,312
>         return;
>     }
>     if (d1.calmode == 3) {
>         d1.docal = 1;
diff srtnver2/librtlsdr.c srtnver3/librtlsdr.c
425c425,428
<     rtlsdr_demod_write_reg(dev, 0, 0x19, 0x05, 1);
---
> //     rtlsdr_demod_write_reg(dev, 0, 0x19, 0x05, 1);
> //    changed as per Changing from 0x25 to 0xd5 here switches the AGC off SM5BSZ July2 2012 
> //    didn't see any change AEER 13 Nov 13
>     rtlsdr_demod_write_reg(dev, 0, 0x19, 0xd5, 1);
432a436,449
> 
> // test made no difference
>     /* disable RF and IF AGC */
> // uint16_t tmp;
> // tmp = rtlsdr_demod_read_reg(dev, 1, 0x04, 1);
> // tmp &= ~0xc0;
> // rtlsdr_demod_write_reg(dev, 1, 0x04, tmp, 1);
> 
>     /* disable AGC PGA */
> // rtlsdr_demod_write_reg(dev, 1, 0xd7, 0x00, 1);
> 
>     /* disable GI PGA */
> // rtlsdr_demod_write_reg(dev, 1, 0xe5, 0x00, 1);
> // end of test
diff srtnver2/main.c srtnver3/main.c
79c79
<     d1.azelport = 0x3f8;        // com1 default
---
> //    d1.azelport = 0x3f8;        // com1 default for old SRT 
92a93
>     d1.nblk = 5;                // number of blocks in vspectra
101,110c102,112
<     d1.ptoler = 1;
<     d1.countperstep = 10000;    // default large number for no stepping 
<     d1.elcounts_per_deg = (52.0 * 27.0 / 120.0); // default for H-180
<     d1.azcounts_per_deg = 8.0 * 32.0 * 60.0 / (360.0 * 9.0); // default for CASSIMOUNT
<     d1.rod = 1;                 // default to rod as on CASSIMOUNT
<     d1.rod1 = 14.25;            // rigid arm length
<     d1.rod2 = 16.5;             // distance from pushrod upper joint to el axis
<     d1.rod3 = 2.0;              // pushrod collar offset
<     d1.rod4 = 110.0;            // angle at horizon
<     d1.rod5 = 30.0;             // pushrod counts per inch
---
> //    used for old SRT mount and controller
> //    d1.ptoler = 1;
> //    d1.countperstep = 10000;    // default large number for no stepping 
> //    d1.elcounts_per_deg = (52.0 * 27.0 / 120.0); // default for H-180
> //    d1.azcounts_per_deg = 8.0 * 32.0 * 60.0 / (360.0 * 9.0); // default for CASSIMOUNT
> //    d1.rod = 1;                 // default to rod as on CASSIMOUNT
> //    d1.rod1 = 14.25;            // rigid arm length
> //    d1.rod2 = 16.5;             // distance from pushrod upper joint to el axis
> //    d1.rod3 = 2.0;              // pushrod collar offset
> //    d1.rod4 = 110.0;            // angle at horizon
> //    d1.rod5 = 30.0;             // pushrod counts per inch
147a150,151
>     d1.dongle = 0;              // set to zero initially - set to 1 in Init_Device if dongle
>     d1.npoly = 25;              // number of terms in polynomial fit of bandpass
158c162,163
<         printf("initializing antenna controller\n");
---
>         if (d1.printout)
>             printf("initializing antenna controller\n");
164a170,172
>     } else {
>         d1.azprev = d1.azlim1;
>         d1.elprev = d1.ellim1;
182c190
<         Init_Device();          // for dongle
---
>         Init_Device(0);
247c255
<                              "click to clear integration and reset time plot to mid-scale", NULL);
---
>                              "click to clear integration and reset time plot to 1/4-scale", NULL);
252c260
<         gtk_tooltips_set_tip(tooltips, button_freq, "click to enter new frequency", NULL);
---
>         gtk_tooltips_set_tip(tooltips, button_freq, "click to enter new frequency [bw] [nfreq]", NULL);
305d312
<     d1.savmess[0] = 0;
311c318,319
<             cleararea();
---
>             if (d1.displ)
>                 cleararea();
315a324,325
>             if (d1.dongle)
>                 Init_Device(1);
347c357,358
<         cleararea();
---
>         if (d1.displ)
>             cleararea();
424a436,437
>                 if (d1.displ)
>                     gtk_tooltips_set_tip(tooltips, button_npoint, "click to start npoint scan", NULL);
diff srtnver2/outfile.c srtnver3/outfile.c
82,83c82,84
<                 istart*d1.bw/d1.nfreq+d1.efflofreq,istop*d1.bw/d1.nfreq+d1.efflofreq, freqsep, d1.bw, d1.fbw, d1.nfreq, d1.nsam,
<                 istop - istart, d1.integ * d1.nsam / (2.0e6 * d1.bw), sigma, d1.bsw);
---
>                 istart * d1.bw / d1.nfreq + d1.efflofreq, istop * d1.bw / d1.nfreq + d1.efflofreq, freqsep,
>                 d1.bw, d1.fbw, d1.nfreq, d1.nsam, istop - istart, d1.integ * d1.nsam / (2.0e6 * d1.bw), sigma,
>                 d1.bsw);
diff srtnver2/plot.c srtnver3/plot.c
164c164,167
<             gdk_draw_line(pixmap, drawing_area->style->black_gc, x, y - 2, x, y + 2);
---
>             if(y > midy + 2) y1 = y - 2;
>             else y1 = midy;
>             gdk_draw_line(pixmap, drawing_area->style->black_gc, x, y1, x, y + 2);
>             if(y < midy*1.05) y = midy*1.05;
168a172,177
> 
>     if (d1.azelsim) {
>         sprintf(txt, "antenna motion simulated");
>         iy = midy * 0.45;
>         gdk_draw_text(pixmap, fixed_font, drawing_area->style->black_gc, ix, iy, txt, strlen(txt));
>     }
375c384
<     if (d1.ptick && fmod(secs, 60) == 0.0) {
---
>     if (d1.ptick && fmod(secs, 60) < 2.5) {
382c391
<     if (fmod(secs, 60) >= 0.5)
---
>     if (fmod(secs, 60) >= 2.5)
diff srtnver2/README srtnver3/README
1c1
< newsrtsource_ver2 tar ball includes c-code for the "new" SRT
---
> newsrtsource_ver3 tar ball includes c-code for the "new" SRT
18c18,24
< for the compilation to complete without errors
---
> for the compilation to complete without errors. 
> 
> This version has corrected a few problems like some overwitting of the display.
> Improvements have been made in the bandpass calibration wen using the TV dongle.
> The simplest version (last option in srtnmake script) which uses the TV dongle and
> a software FFT is recommended. Given the narrow bandwidth of the dongle compared with
> the PCI-DAS4020 the software FFT speed on most new PCs is quite satisfactory.  
59c65
<   aeer 15 August 2013
---
>   aeer 26 Nov 2013
diff srtnver2/sport.c srtnver3/sport.c
59,61c59,61
<     if (d1.azelsim == 0) {
<         azz = az - d1.azlim1;
<         ell = el - d1.ellim1;
---
>     azz = az - d1.azlim1;
>     ell = el - d1.ellim1;
>     if (!d1.azelsim)
63,66c63,70
<         d1.aznow = azz + d1.azlim1;
<         d1.elnow = ell + d1.ellim1;
<         if (d1.debug)
<             printf("aznow_after_read %3.0f elnow %3.0f\n", d1.aznow, d1.elnow);
---
>     else {
>         azz = d1.azprev - d1.azlim1;
>         ell = d1.elprev - d1.ellim1;
>     }
>     d1.aznow = azz + d1.azlim1;
>     d1.elnow = ell + d1.ellim1;
>     if (d1.debug)
>         printf("aznow_after_read %3.0f elnow %3.0f\n", d1.aznow, d1.elnow);
68,71c72,76
<         if ((fabs(d1.aznow - d1.azcmd) > 1.0 || fabs(d1.elnow - d1.elcmd) > 1.0)
<             && (az >= d1.azlim1 && az < d1.azlim2 && el >= d1.ellim1 && el < d1.ellim2)) {
<             azz = az - d1.azlim1;
<             ell = el - d1.ellim1;
---
>     if ((fabs(d1.aznow - d1.azcmd) > 1.0 || fabs(d1.elnow - d1.elcmd) > 1.0)
>         && (az >= d1.azlim1 && az < d1.azlim2 && el >= d1.ellim1 && el < d1.ellim2)) {
>         azz = az - d1.azlim1;
>         ell = el - d1.ellim1;
>         if (!d1.azelsim) {
74,78c79,85
<             d1.aznow = azz + d1.azlim1;
<             d1.elnow = ell + d1.ellim1;
<             if (d1.debug)
<                 printf("aznow_after_cmd %3.0f elnow %3.0f cmd %3.0f %3.0f %3.0f %3.0f\n", d1.aznow, d1.elnow,
<                        d1.azcmd, d1.elcmd, az, el);
---
>         } else {
>             azz = (d1.azcmd + d1.azprev) * 0.5 - d1.azlim1;
>             ell = (d1.elcmd + d1.elprev) * 0.5 - d1.ellim1;
>             if (fabs(d1.aznow - d1.azcmd) < 2.0)
>                 azz = d1.azcmd - d1.azlim1;
>             if (fabs(d1.elnow - d1.elcmd) < 2.0)
>                 ell = d1.elcmd - d1.ellim1;
79a87,92
>         d1.azprev = d1.aznow = azz + d1.azlim1;
>         d1.elprev = d1.elnow = ell + d1.ellim1;
>         if (d1.debug)
>             printf("aznow_after_cmd %3.0f elnow %3.0f cmd %3.0f %3.0f %3.0f %3.0f\n", d1.aznow, d1.elnow,
>                    d1.azcmd, d1.elcmd, az, el);
>     }
80a94
>     if (d1.azelsim)
82,95c96,99
<         if (d1.comerr > 0) {
<             sprintf(txt, " comerr= %d", d1.comerr);
<             iy = midy * 0.1;
<             if (d1.displ) {
<                 gdk_draw_rectangle(pixmap, drawing_area->style->white_gc, TRUE, ixe,
<                                    iy - midy * 0.04, midxr, midy * 0.05);
<                 gdk_draw_text(pixmap, fixed_font, drawing_area->style->black_gc, ixe, iy, txt, strlen(txt));
<             }
<         }
<     } else {
<         sprintf(txt, "antenna simulated");
<         d1.aznow = az;
<         d1.elnow = el;
<         sprintf(recv, "az %3.0f el %2.0f", az, el);
---
>     else
>         sprintf(str, "antenna drive simulated:");
>     if (d1.comerr > 0) {
>         sprintf(txt, " comerr= %d", d1.comerr);
98c102
<             gdk_draw_rectangle(pixmap, drawing_area->style->white_gc, TRUE, ix,
---
>             gdk_draw_rectangle(pixmap, drawing_area->style->white_gc, TRUE, ixe,
100c104
<             gdk_draw_text(pixmap, fixed_font, drawing_area->style->black_gc, ix, iy, txt, strlen(txt));
---
>             gdk_draw_text(pixmap, fixed_font, drawing_area->style->black_gc, ixe, iy, txt, strlen(txt));
171,175c175,179
<         if (!d1.azelsim) {
<             kk = 0;
<             while (kk < 100 && n == 0) {
<                 azz = d1.aznow - d1.azlim1;
<                 ell = d1.elnow - d1.ellim1;
---
>         kk = 0;
>         while (kk < 100 && n == 0) {
>             azz = d1.aznow - d1.azlim1;
>             ell = d1.elnow - d1.ellim1;
>             if (!d1.azelsim)
177,178c181,191
<                 d1.aznow = azz + d1.azlim1;
<                 d1.elnow = ell + d1.ellim1;
---
>             else {
>                 azz = (d1.azcmd + d1.azprev) * 0.5 - d1.azlim1;
>                 ell = (d1.elcmd + d1.elprev) * 0.5 - d1.ellim1;
>                 if (fabs(d1.aznow - d1.azcmd) < 2.0)
>                     azz = d1.azcmd - d1.azlim1;
>                 if (fabs(d1.elnow - d1.elcmd) < 2.0)
>                     ell = d1.elcmd - d1.ellim1;
>             }
>             d1.azprev = d1.aznow = azz + d1.azlim1;
>             d1.elprev = d1.elnow = ell + d1.ellim1;
>             if (d1.printout)
180c193,194
<                 if (fabs(d1.aznow - d1.azcmd) > 1.0 || fabs(d1.elnow - d1.elcmd) > 1.0) {
---
>             if (fabs(d1.aznow - d1.azcmd) > 1.0 || fabs(d1.elnow - d1.elcmd) > 1.0) {
>                 if (d1.printout)
183,187c197,200
<                     sprintf(txt, "waiting on antenna %d ", kk);
<                     iy = midy * 0.1;
<                     d1.slew = 1;
<                     if (d1.displ) {
<                         ix = midx * 1.55;
---
>                 sprintf(txt, "waiting on antenna %d ", kk);
>                 d1.slew = 1;
>                 if (d1.displ) {
>                     ix = midx * 1.55;
189c202
<                         midxr = midx * 2 - ix;
---
>                     midxr = midx * 2 - ix;
191,233c204,246
<                         x = d1.azcmd * midx / 180.0;
<                         if (d1.south == 0)
<                             x -= midx;
<                         if (x < 0)
<                             x += midx * 2;
<                         if (x > midx * 2)
<                             x -= midx * 2;
<                         y = midy * 2 - d1.elcmd * midy * 2.0 / 180.0;
<                         color.red = 0;
<                         color.green = 0;
<                         color.blue = 0xffff;
<                         gdk_color_parse("blue", &color);
< 
<                         gtk_widget_modify_fg(drawing_area, GTK_STATE_NORMAL, &color);
<                         gdk_draw_line(pixmap, drawing_area->style->fg_gc[GTK_STATE_NORMAL], x - 4,
<                                       y, x + 4, y);
<                         gdk_draw_line(pixmap, drawing_area->style->fg_gc[GTK_STATE_NORMAL], x,
<                                       y - 4, x, y + 4);
< 
< 
<                         gdk_draw_rectangle(pixmap, drawing_area->style->white_gc, TRUE, ix,
<                                            iy - midy * 0.04, midxr, midy * 0.05);
<                         gdk_draw_text(pixmap, fixed_font,
<                                       drawing_area->style->black_gc, ix, iy, txt, strlen(txt));
<                         sprintf(txt, "cmd  %5.1f %4.1f deg", d1.azcmd, d1.elcmd);
<                         iy = midy * 0.15;
<                         gdk_draw_text(pixmap, fixed_font,
<                                       drawing_area->style->black_gc, ix, iy, txt, strlen(txt));
<                         sprintf(txt, "azel %5.1f %4.1f deg", d1.aznow, d1.elnow);
<                         iy = midy * 0.20;
<                         gdk_draw_text(pixmap, fixed_font, drawing_area->style->black_gc, ix, iy,
<                                       txt, strlen(txt));
<                         sprintf(txt, "offsets %5.1f %4.1f deg", d1.azoff, d1.eloff);
<                         iy = midy * 0.25;
<                         gdk_draw_text(pixmap, fixed_font, drawing_area->style->black_gc, ix, iy,
<                                       txt, strlen(txt));
<                         azel_to_radec(d1.secs, d1.aznow, d1.elnow, &ra, &dec);
<                         sprintf(txt, "ra %5.1f hr %4.1f deg", ra * 12.0 / PI, dec * 180.0 / PI);
<                         iy = midy * 0.30;
<                         gdk_draw_text(pixmap, fixed_font, drawing_area->style->black_gc, ix, iy,
<                                       txt, strlen(txt));
<                         color.green = color.red = color.blue = 0xffff;
<                         gtk_widget_modify_bg(button_stow, GTK_STATE_NORMAL, &color);
---
>                     x = d1.azcmd * midx / 180.0;
>                     if (d1.south == 0)
>                         x -= midx;
>                     if (x < 0)
>                         x += midx * 2;
>                     if (x > midx * 2)
>                         x -= midx * 2;
>                     y = midy * 2 - d1.elcmd * midy * 2.0 / 180.0;
>                     color.red = 0;
>                     color.green = 0;
>                     color.blue = 0xffff;
>                     gdk_color_parse("blue", &color);
> 
>                     gtk_widget_modify_fg(drawing_area, GTK_STATE_NORMAL, &color);
>                     gdk_draw_line(pixmap, drawing_area->style->fg_gc[GTK_STATE_NORMAL], x - 4, y, x + 4, y);
>                     gdk_draw_line(pixmap, drawing_area->style->fg_gc[GTK_STATE_NORMAL], x, y - 4, x, y + 4);
> 
>                     iy = midy * 0.1;
> //                        gdk_draw_rectangle(pixmap, drawing_area->style->white_gc, TRUE, ix,
> //                                           iy - midy * 0.04, midxr, midy * 0.05);
>                     gdk_draw_rectangle(pixmap, drawing_area->style->white_gc, TRUE, ix,
>                                        iy - midy * 0.04, midxr, midy * 0.25);
>                     gdk_draw_text(pixmap, fixed_font,
>                                   drawing_area->style->black_gc, ix, iy, txt, strlen(txt));
>                     sprintf(txt, "cmd  %5.1f %4.1f deg", d1.azcmd, d1.elcmd);
>                     iy = midy * 0.15;
>                     gdk_draw_text(pixmap, fixed_font,
>                                   drawing_area->style->black_gc, ix, iy, txt, strlen(txt));
>                     sprintf(txt, "azel %5.1f %4.1f deg", d1.aznow, d1.elnow);
>                     iy = midy * 0.20;
>                     gdk_draw_text(pixmap, fixed_font, drawing_area->style->black_gc, ix, iy,
>                                   txt, strlen(txt));
>                     sprintf(txt, "offsets %5.1f %4.1f deg", d1.azoff, d1.eloff);
>                     iy = midy * 0.25;
>                     gdk_draw_text(pixmap, fixed_font, drawing_area->style->black_gc, ix, iy,
>                                   txt, strlen(txt));
>                     azel_to_radec(d1.secs, d1.aznow, d1.elnow, &ra, &dec);
>                     sprintf(txt, "ra %5.1f hr %4.1f deg", ra * 12.0 / PI, dec * 180.0 / PI);
>                     iy = midy * 0.30;
>                     gdk_draw_text(pixmap, fixed_font, drawing_area->style->black_gc, ix, iy,
>                                   txt, strlen(txt));
>                     color.green = color.red = color.blue = 0xffff;
>                     gtk_widget_modify_bg(button_stow, GTK_STATE_NORMAL, &color);
236c249
<                         Repaint();
---
>                     Repaint();
240,241c253,254
<                         while (gtk_events_pending() || d1.stopproc) {
<                             gtk_main_iteration();
---
>                     while (gtk_events_pending() || d1.stopproc) {
>                         gtk_main_iteration();
243c256
<                         }
---
>                     }
245,253c258,263
<                     } else if (d1.debug)
<                         printf("%s\n", txt);
<                     sleep(1);
<                 } else
<                     n = 1;
<                 kk++;
<             }
<             if (d1.debug)
<                 printf("recv %s\n", recv);
---
>                 } else if (d1.debug)
>                     printf("%s\n", txt);
>                 sleep(1);
>             } else
>                 n = 1;
>             kk++;
254a265,266
>         if (d1.debug)
>             printf("recv %s\n", recv);
324c336
<         if (d1.azelsim == 0 && d1.slew)
---
>         if (d1.slew)
diff srtnver2/srt.cat srtnver3/srt.cat
8a9
> * CALMODE 3 same as CALMODE 2 but doesn't need entry to confirm
16c17
< CALMODE 2
---
> CALMODE 3
19c20,21
< *SPEED_UP 700 
---
> *SPEED_UP 400 
> *SPEED_UP -18     // negative value advances time hours 
22c24
< *COMMAND testcmd.txt
---
> *COMMAND galacticHsurvey.txt
39a42
> *SOU 02 23 17 61 38 54 W3 1950    // strongest OH line 1665.4 MHz -44 km/s 
66c69
< BEAMWIDTH 8
---
> BEAMWIDTH 5
68,70c71,74
< AZLIMITS 27 355
< ELLIMITS 0.0 89.0
< TSYS 171
---
> AZLIMITS 21 355
> ELLIMITS -2 89.0
> TSYS 171    
> TCAL 290    // should equal ambient load
79a84
> RESTFREQ 1420.401
80a86,87
> NBLOCK 1   // number of blocks per update - can be reduced for Beagle board with slow display for PCI it is hardwired to 20
> *NUMPOLY 15  // use default value of 25 for dongle
92c99
< RFI 1420.000 0.01
---
> *RFI 1420.000 0.01
Only in srtnver2: srt.catdongle
diff srtnver2/srt.hlp srtnver3/srt.hlp
2c2
< ### Created 6/10/2005 by Eric Evarts
---
> ### Original by Eric Evarts in 2005
9a10,52
> srt.cat keywords:
> 
> STATION 
> AZLIMITS 
> ELLIMITS
> NOISECAL
> TCAL
> CALMODE
> SIMULATE ANTENNA  RECEIVER FFT
> MAINTENANCE
> PLOTSEC
> NBSW
> NBLOCK
> NUMPOLY
> BEAMWIDTH
> TOLERANCE
> CASSIMOUNT - no longer supported
> H180MOUNT - no longer supported
> ALFASPID
> AZCOUNTS
> ELCOUNTS
> AZELPORT
> COMMAND - command file name
> TSYS
> FREQUENCY
> RESTFREQ - for vlsr calculations
> FREQCORR - frequency correction for dongle in MHz
> BANDWIDTH 
> NUMFREQ
> DATADIR - data directory - defaults to directory with the executable
> COUNTPERSTEP 
> RECORD - number of periods per output add [SPEC] to include spectrum 
> NODISPLAY
> NOPRINTOUT
> DEBUG
> SPEED_UP
> SOU - source ra dec epoch
> GALACTIC - lat long
> AZEL 
> RFISIGMA - level at which to report RFI default = 6 
> RFI 
> also see comments in srt.cat
> 
13,14c56,59
< Mode
< Mode2
---
> The SRT operates in a total power mode. The bandpass is normalized by clicking the cal botton.
> NPOINT does 5x5 point scan to find peak power and pointing offsets. BEAMSW can be used for sources
> which have suitable reference spectra on either side of the source. the beam throw equals the BEAMWIDTH 
> set in srt.cat. NBSW sets the number of integration periods in each beam position. 
24,34d68
< if needed tilt and backlash corrections can be added
< 
< checking receiver communications problems:
< if antenna communication doesn't work check this first
< make sure receiver is connected - try powering the controller down and back up to reboot the receiver
< 
< checking antenna communications:
< disconnect RS232 cable from controller or turn controller off
< srt software should say "waiting on azimuth"
< disconnect antenna coax and antenna cable
< srt software should indicate an immediate timeout in azimuth and elevation
47c81,82
< However in many cases the errors are determined by systematic effects. For example the errors in a beamswitch continuum observation are estimated from the variance in the data from many on/offs
---
> However in many cases the errors are determined by systematic effects. 
> For example the errors in a beamswitch continuum observation are estimated from the variance in the data from many on/offs
51c86
< Beam Switch
---
> Beam Switch - click on beamsw to start and stop
56c91
< Frequency
---
> Frequency - optional arguments are bandwidth and number of frequencies
61c96,97
< Offset
---
> Offset - click on offset and enter az el offets in degrees
> with space between entries
66c102,104
< Record
---
> Record - click on record to start and stop 
> RECORD 10 SPEC in srt.cat sets interval to 10 averaging periods where SPEC
> records spectrum. Without the keyword SPEC on the power is recorded
72c110
< (filename srt.cmd)
---
> (default filename srt.cmd)
92,93c130,131
<  calibrate (for vane) or noisecal (for noise diode)
<  record [filename] [recordmode(0=normal,1=short,2=add vlsr,3=special,4=summary only)]
---
>  calibrate 
>  record [optional filename]
95,97c133
< short - suppresses recording cmds
<  freq frequency num [spacing] - for analog receiver
<  freq frequency digitalmode - for digital receiver
---
>  freq frequency [bandwidth]num 
109c145
<  A command file can be checked by running java in simulate mode  -see help on cmdline options
---
>  A command file can be checked by running in simulate mode  -see help on cmdline options
115c151,174
< Calibration
---
> Calibration - various modes are available enter desired mode
> in srt.cat file using CALMODE keyword. Suggest CALMODE 2 or 3
> The basic method is to get the system temperature from the "Y-factor"
> 
>    Y-factor = power_on_hot_load / power_on_cold_load
>                 = (tsys + hot_temperature) / (tsys + cold_temperature)
> 
>    solving   tsys = (hot_temperature - y*cold_temperature) / (y-1)
> 
>    power_on_hot_load  = with absorber over the feed  or pointing at the trees
>    power_on_cold_load = looking at cold sky
>    hot_temperature = ambient ~ 290 K
>    cold_temperature = 3 K from CMB
> 
> Since the LNA noise temperature is very stable is in not really necessary
> to get the system temperature every time you point the telescope. What is
> needed is to get the power looking at an absorber or pointing at the trees fairly
> frequently and the the gain of the LNA + amplifiers + dongle change with time.
> CALMODE 3 is appropriate if you can point at the trees. In this case just click
> on cal and the software will divide by a reference spectrum and convert the power to kelvin
> assuming the power while still pointed at the trees corresponds to Tsys + Tcal. 
> CALMODE 2 does the same by waits for the operator to hit enter when the absorber
> has been placed over the feed.
> 
Binary files srtnver2/srtn and srtnver3/srtn differ
diff srtnver2/srtnmake srtnver3/srtnmake
15c15
< gcc -W -Wall -O3 $CFLAGS $LIBS main.c vspectra_pci.c  disp.c plot.c cat.c geom.c time.c outfile.c sport.c map.c cmdfl.c cal.c srthelp.c velspec.c four.c  amdfft.c -lm  -lacml /usr/lib/libgfortran.a
---
> #gcc -W -Wall -O3 $CFLAGS $LIBS main.c vspectra_pci.c  disp.c plot.c cat.c geom.c time.c outfile.c sport.c map.c cmdfl.c cal.c srthelp.c velspec.c four.c  amdfft.c -lm  -lacml /usr/lib/libgfortran.a
24c24
< #gcc -W -Wall -O3 $CFLAGS $LIBS main.c vspectra_four.c disp.c plot.c cat.c geom.c time.c outfile.c sport.c map.c cmdfl.c cal.c srthelp.c velspec.c four.c  librtlsdr.c tuner_r820t.c -lm `pkg-config --libs --cflags libusb-1.0`
---
> gcc -W -Wall -O3 $CFLAGS $LIBS main.c vspectra_four.c disp.c plot.c cat.c geom.c time.c outfile.c sport.c map.c cmdfl.c cal.c srthelp.c velspec.c four.c  librtlsdr.c tuner_r820t.c -lm `pkg-config --libs --cflags libusb-1.0`
27a28
> rm a.out
Only in srtnver2: testcmd.txt
diff srtnver2/time.c srtnver3/time.c
140,143c140,147
<     if (d1.start_time == 0.0)
<         d1.start_time = secs;
<     if (d1.speed_up)
<         secs = d1.start_time + (secs - d1.start_time) * d1.speed_up;
---
>     if (d1.azelsim) {
>         if (d1.start_time == 0.0)
>             d1.start_time = secs;
>         if (d1.speed_up > 0)
>             secs = d1.start_time + (secs - d1.start_time) * d1.speed_up;
>         else
>             secs += -d1.speed_up * 3600.0; // advance by hours
>     }
diff srtnver2/velspec.c srtnver3/velspec.c
240c240
<         sigma = d1.tsys / sqrt((d1.nsam * d1.integ / (2.0e6 * d1.bw)) * freqsep * 1e6);
---
>         sigma = 3.0 * d1.tsys / sqrt((d1.nsam * d1.integ / (2.0e6 * d1.bw)) * freqsep * 1e6);
366,367d365
<         if (d1.freq > 1500.0)
<             d1.restfreq = 1612.201; // OH line
487c485
<             y1 = (yoffset + 5) * sy;
---
>             y1 = (yoffset + 10) * sy;
489c487
<             y2 = (yoffset + yy + 5) * sy;
---
>             y2 = (yoffset + yy + 10) * sy;
499c497
<             y1 = (yoffset + 5) * sy;
---
>             y1 = (yoffset + 10) * sy;
501c499
<             y2 = (yoffset + 5) * sy;
---
>             y2 = (yoffset + 10) * sy;
511c509
<             y1 = (yoffset + yy + 5) * sy;
---
>             y1 = (yoffset + yy + 10) * sy;
513c511
<             y2 = (yoffset + yy + 5) * sy;
---
>             y2 = (yoffset + yy + 10) * sy;
522,532c520,522
<             sprintf(txt, "one");
<             x1 = (xoffset + 285) * sx;
<             y1 = (yoffset + yy * 0.5 + 5) * sy;
<             gdk_draw_text(vpixmap, vfixed_font, vdrawing_area->style->black_gc, x1, y1, txt, strlen(txt));
<             psx1 = x1 / sx;
<             psy1 = yps - y1 / sy;
<             if (d1.psw)
<                 fprintf(file1, "%f %f moveto\n (%s) show\n", psx1, psy1, txt);
<             sprintf(txt, "sigma");
<             x1 = (xoffset + 280) * sx;
<             y1 = (yoffset + yy * 0.5 + 13) * sy;
---
>             sprintf(txt, "3-sigma");
>             x1 = (xoffset + 270) * sx;
>             y1 = (yoffset + yy * 0.5 + 14) * sy;
diff srtnver2/vspectra.c srtnver3/vspectra.c
62c62
<     num = 5;                    //was 20   // was 100
---
>     num = d1.nblk;              //was 20   // was 100
189c189
< void Init_Device()
---
> void Init_Device(int mode)
205a206,215
>     d1.dongle = 1;
> 
>     if (mode) {
>         r = rtlsdr_set_center_freq(dev, frequency);
>         if (r < 0)
>             fprintf(stderr, "WARNING: Failed to set center freq.\n");
>         else if (d1.printout)
>             printf("Tuned to %u Hz.\n", frequency);
>         return;
>     }
213c223,224
<     fprintf(stderr, "Found %d device(s):\n", device_count);
---
>     if (d1.printout)
>         printf("Found %d device(s):\n", device_count);
216c227,228
<         fprintf(stderr, "  %d:  %s, %s, SN: %s\n", i, vendor, product, serial);
---
>         if (d1.printout)
>             printf("  %d:  %s, %s, SN: %s\n", i, vendor, product, serial);
219c231,232
<     fprintf(stderr, "Using device %d: %s\n", dev_index, rtlsdr_get_device_name(dev_index));
---
>     if (d1.printout)
>         printf("Using device %d: %s\n", dev_index, rtlsdr_get_device_name(dev_index));
236,237c249,250
<     else
<         fprintf(stderr, "Tuned to %u Hz.\n", frequency);
---
>     else if (d1.printout)
>         printf("Tuned to %u Hz.\n", frequency);
254,255d266
<         else
<             fprintf(stderr, "Tuner gain set to %f dB.\n", gain / 10.0);
diff srtnver2/vspectra_fftw.c srtnver3/vspectra_fftw.c
62c62
<     num = 5;                    //was 20   // was 100
---
>     num = d1.nblk;                    //was 20   // was 100
188c188
< void Init_Device()
---
> void Init_Device(int mode)
204a205,215
>     d1.dongle = 1;
> 
>     if (mode) {
>         /* Set the frequency */
>         r = rtlsdr_set_center_freq(dev, frequency);
>         if (r < 0)
>             fprintf(stderr, "WARNING: Failed to set center freq.\n");
>         else if (d1.printout)
>             printf("Tuned to %u Hz.\n", frequency);
>         return;
>     }
212c223,224
<     fprintf(stderr, "Found %d device(s):\n", device_count);
---
>     if (d1.printout)
>         printf("Found %d device(s):\n", device_count);
215c227,228
<         fprintf(stderr, "  %d:  %s, %s, SN: %s\n", i, vendor, product, serial);
---
>         if (d1.printout)
>             printf("  %d:  %s, %s, SN: %s\n", i, vendor, product, serial);
218c231,232
<     fprintf(stderr, "Using device %d: %s\n", dev_index, rtlsdr_get_device_name(dev_index));
---
>     if (d1.printout)
>         printf("Using device %d: %s\n", dev_index, rtlsdr_get_device_name(dev_index));
235,236c249,250
<     else
<         fprintf(stderr, "Tuned to %u Hz.\n", frequency);
---
>     else if (d1.printout)
>         printf("Tuned to %u Hz.\n", frequency);
253,254d266
<         else
<             fprintf(stderr, "Tuner gain set to %f dB.\n", gain / 10.0);
diff srtnver2/vspectra_four.c srtnver3/vspectra_four.c
51c51
<     num = 5;                    //was 20   // was 100
---
>     num = d1.nblk;                    //was 20   // was 100
158c158
< void Init_Device()
---
> void Init_Device(int mode)
174a175,184
>     d1.dongle = 1;
> 
>     if (mode) {
>         r = rtlsdr_set_center_freq(dev, frequency);
>         if (r < 0)
>             fprintf(stderr, "WARNING: Failed to set center freq.\n");
>         else if (d1.printout)
>             printf("Tuned to %u Hz.\n", frequency);
>         return;
>     }
182c192,193
<     fprintf(stderr, "Found %d device(s):\n", device_count);
---
>     if (d1.printout)
>         printf("Found %d device(s):\n", device_count);
185c196,197
<         fprintf(stderr, "  %d:  %s, %s, SN: %s\n", i, vendor, product, serial);
---
>         if (d1.printout)
>             printf("  %d:  %s, %s, SN: %s\n", i, vendor, product, serial);
188c200,201
<     fprintf(stderr, "Using device %d: %s\n", dev_index, rtlsdr_get_device_name(dev_index));
---
>     if (d1.printout)
>         printf("Using device %d: %s\n", dev_index, rtlsdr_get_device_name(dev_index));
205,206c218,219
<     else
<         fprintf(stderr, "Tuned to %u Hz.\n", frequency);
---
>     else if (d1.printout)
>         printf("Tuned to %u Hz.\n", frequency);
223,224d235
<         else
<             fprintf(stderr, "Tuner gain set to %f dB.\n", gain / 10.0);
diff srtnver2/vspectra_pci.c srtnver3/vspectra_pci.c
45c45
< void Init_Device()
---
> void Init_Device(int mode)
47a48
>     mode = 0;
diff srtnver2/vspectra_pci_fftw.c srtnver3/vspectra_pci_fftw.c
47c47
< void Init_Device()
---
> void Init_Device(int mode)
49a50
>     mode = 0;
