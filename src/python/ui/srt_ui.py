# -*- coding: utf-8 -*- ############################################################################# Python code generated with wxFormBuilder (version Sep 12 2010)## http://www.wxformbuilder.org/#### PLEASE DO "NOT" EDIT THIS FILE!###########################################################################import wxfrom ui_component import WebcamPanel############################################################################# Class MainFrame###########################################################################class MainFrame ( wx.Frame ):		def __init__( self, parent ):		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"srt control", pos = wx.DefaultPosition, size = wx.Size( 800,700 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )				self.SetSizeHintsSz( wx.DefaultSize, wx.DefaultSize )				bSizer1 = wx.BoxSizer( wx.VERTICAL )				self.m_log_box = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( -1,100 ), wx.TE_LEFT|wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_WORDWRAP )		self.m_log_box.Enable( False )				bSizer1.Add( self.m_log_box, 0, wx.ALL|wx.EXPAND, 2 )				self.m_textCtrl3 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_LEFT|wx.TE_PROCESS_ENTER )		self.m_textCtrl3.SetToolTipString( u"enter commands" )				bSizer1.Add( self.m_textCtrl3, 0, wx.ALL|wx.EXPAND, 2 )				bSizer2 = wx.BoxSizer( wx.VERTICAL )				self.m_splitter10 = wx.SplitterWindow( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.SP_3DSASH|wx.SP_LIVE_UPDATE )		self.m_splitter10.Bind( wx.EVT_IDLE, self.m_splitter10OnIdle )				self.m_panel11 = wx.Panel( self.m_splitter10, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		bSizer10 = wx.BoxSizer( wx.HORIZONTAL )				self.m_panel5 = wx.Panel( self.m_panel11, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,-1 ), wx.TAB_TRAVERSAL )		bSizer10.Add( self.m_panel5, 1, wx.EXPAND |wx.ALL, 5 )				self.m_status_window = wx.ScrolledWindow( self.m_panel11, wx.ID_ANY, wx.DefaultPosition, wx.Size( 250,-1 ), wx.VSCROLL )		self.m_status_window.SetScrollRate( 5, 5 )		self.m_status_window.SetMinSize( wx.Size( 200,200 ) )		self.m_status_window.SetMaxSize( wx.Size( 250,250 ) )				sbSizer10 = wx.StaticBoxSizer( wx.StaticBox( self.m_status_window, wx.ID_ANY, u"SRT Status" ), wx.VERTICAL )				self.m_pstatus_location = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,12 ), wx.TAB_TRAVERSAL )		self.m_pstatus_location.SetMinSize( wx.Size( -1,12 ) )		self.m_pstatus_location.SetMaxSize( wx.Size( -1,12 ) )				bSizer48 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_location_label1 = wx.StaticText( self.m_pstatus_location, wx.ID_ANY, u"location:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_location_label1.Wrap( -1 )		self.m_st_location_label1.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_location_label1.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_location_label1.SetMaxSize( wx.Size( 50,-1 ) )				bSizer48.Add( self.m_st_location_label1, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_location_val = wx.StaticText( self.m_pstatus_location, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_location_val.Wrap( -1 )		self.m_st_location_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer48.Add( self.m_st_location_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_location.SetSizer( bSizer48 )		self.m_pstatus_location.Layout()		sbSizer10.Add( self.m_pstatus_location, 1, wx.ALL|wx.EXPAND, 2 )				self.m_pstatus_cmd = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_cmd.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_cmd.SetMaxSize( wx.Size( -1,11 ) )				bSizer481 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_cmd_label = wx.StaticText( self.m_pstatus_cmd, wx.ID_ANY, u"cmd:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_cmd_label.Wrap( -1 )		self.m_st_cmd_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_cmd_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_cmd_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer481.Add( self.m_st_cmd_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_cmd_val = wx.StaticText( self.m_pstatus_cmd, wx.ID_ANY, u"--", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_cmd_val.Wrap( -1 )		self.m_st_cmd_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer481.Add( self.m_st_cmd_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_cmd.SetSizer( bSizer481 )		self.m_pstatus_cmd.Layout()		sbSizer10.Add( self.m_pstatus_cmd, 1, wx.ALL|wx.EXPAND, 2 )				self.m_pstatus_azel = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_azel.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_azel.SetMaxSize( wx.Size( -1,11 ) )				bSizer4818 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_azel_label = wx.StaticText( self.m_pstatus_azel, wx.ID_ANY, u"azel:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_azel_label.Wrap( -1 )		self.m_st_azel_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_azel_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_azel_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer4818.Add( self.m_st_azel_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_azel_val = wx.StaticText( self.m_pstatus_azel, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_azel_val.Wrap( -1 )		self.m_st_azel_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer4818.Add( self.m_st_azel_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_azel.SetSizer( bSizer4818 )		self.m_pstatus_azel.Layout()		sbSizer10.Add( self.m_pstatus_azel, 1, wx.ALL|wx.EXPAND, 2 )				self.m_pstatus_offset = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_offset.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_offset.SetMaxSize( wx.Size( -1,11 ) )				bSizer4811 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_offset_label = wx.StaticText( self.m_pstatus_offset, wx.ID_ANY, u"offsets:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_offset_label.Wrap( -1 )		self.m_st_offset_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_offset_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_offset_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer4811.Add( self.m_st_offset_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_offset_val = wx.StaticText( self.m_pstatus_offset, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_offset_val.Wrap( -1 )		self.m_st_offset_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer4811.Add( self.m_st_offset_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_offset.SetSizer( bSizer4811 )		self.m_pstatus_offset.Layout()		sbSizer10.Add( self.m_pstatus_offset, 1, wx.ALL|wx.EXPAND, 2 )				self.m_pstatus_ra = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_ra.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_ra.SetMaxSize( wx.Size( -1,11 ) )				bSizer4812 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_ra_label = wx.StaticText( self.m_pstatus_ra, wx.ID_ANY, u"ra:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_ra_label.Wrap( -1 )		self.m_st_ra_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_ra_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_ra_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer4812.Add( self.m_st_ra_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_ra_val = wx.StaticText( self.m_pstatus_ra, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_ra_val.Wrap( -1 )		self.m_st_ra_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer4812.Add( self.m_st_ra_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_ra.SetSizer( bSizer4812 )		self.m_pstatus_ra.Layout()		sbSizer10.Add( self.m_pstatus_ra, 1, wx.ALL|wx.EXPAND, 2 )				self.m_pstatus_time = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_time.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_time.SetMaxSize( wx.Size( -1,11 ) )				bSizer4813 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_time_label = wx.StaticText( self.m_pstatus_time, wx.ID_ANY, u"time:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_time_label.Wrap( -1 )		self.m_st_time_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_time_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_time_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer4813.Add( self.m_st_time_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_time_val = wx.StaticText( self.m_pstatus_time, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_time_val.Wrap( -1 )		self.m_st_time_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer4813.Add( self.m_st_time_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_time.SetSizer( bSizer4813 )		self.m_pstatus_time.Layout()		sbSizer10.Add( self.m_pstatus_time, 1, wx.ALL|wx.EXPAND, 2 )				self.m_pstatus_source = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_source.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_source.SetMaxSize( wx.Size( -1,11 ) )				bSizer4814 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_source_label = wx.StaticText( self.m_pstatus_source, wx.ID_ANY, u"source:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_source_label.Wrap( -1 )		self.m_st_source_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_source_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_source_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer4814.Add( self.m_st_source_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_source_val = wx.StaticText( self.m_pstatus_source, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_source_val.Wrap( -1 )		self.m_st_source_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer4814.Add( self.m_st_source_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_source.SetSizer( bSizer4814 )		self.m_pstatus_source.Layout()		sbSizer10.Add( self.m_pstatus_source, 1, wx.ALL|wx.EXPAND, 2 )				self.m_pstatus_vlsr = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_vlsr.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_vlsr.SetMaxSize( wx.Size( -1,11 ) )				bSizer4815 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_vlsr_label = wx.StaticText( self.m_pstatus_vlsr, wx.ID_ANY, u"vlsr:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_vlsr_label.Wrap( -1 )		self.m_st_vlsr_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_vlsr_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_vlsr_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer4815.Add( self.m_st_vlsr_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_vlsr_val = wx.StaticText( self.m_pstatus_vlsr, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_vlsr_val.Wrap( -1 )		self.m_st_vlsr_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer4815.Add( self.m_st_vlsr_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_vlsr.SetSizer( bSizer4815 )		self.m_pstatus_vlsr.Layout()		sbSizer10.Add( self.m_pstatus_vlsr, 1, wx.ALL|wx.EXPAND, 2 )				self.m_pstatus_integ = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_integ.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_integ.SetMaxSize( wx.Size( -1,11 ) )				bSizer4816 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_integ_label = wx.StaticText( self.m_pstatus_integ, wx.ID_ANY, u"integ:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_integ_label.Wrap( -1 )		self.m_st_integ_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_integ_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_integ_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer4816.Add( self.m_st_integ_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_integ_val = wx.StaticText( self.m_pstatus_integ, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_integ_val.Wrap( -1 )		self.m_st_integ_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer4816.Add( self.m_st_integ_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_integ.SetSizer( bSizer4816 )		self.m_pstatus_integ.Layout()		sbSizer10.Add( self.m_pstatus_integ, 1, wx.ALL|wx.EXPAND, 2 )				self.m_pstatus_freq = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_freq.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_freq.SetMaxSize( wx.Size( -1,11 ) )				bSizer4817 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_freq_label = wx.StaticText( self.m_pstatus_freq, wx.ID_ANY, u"freq:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_freq_label.Wrap( -1 )		self.m_st_freq_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_freq_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_freq_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer4817.Add( self.m_st_freq_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_freq_val = wx.StaticText( self.m_pstatus_freq, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_freq_val.Wrap( -1 )		self.m_st_freq_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer4817.Add( self.m_st_freq_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_freq.SetSizer( bSizer4817 )		self.m_pstatus_freq.Layout()		sbSizer10.Add( self.m_pstatus_freq, 1, wx.ALL|wx.EXPAND, 2 )				self.m_pstatus_if = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_if.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_if.SetMaxSize( wx.Size( -1,11 ) )				bSizer48171 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_if_label = wx.StaticText( self.m_pstatus_if, wx.ID_ANY, u"if:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_if_label.Wrap( -1 )		self.m_st_if_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_if_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_if_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer48171.Add( self.m_st_if_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_if_val = wx.StaticText( self.m_pstatus_if, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_if_val.Wrap( -1 )		self.m_st_if_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer48171.Add( self.m_st_if_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_if.SetSizer( bSizer48171 )		self.m_pstatus_if.Layout()		sbSizer10.Add( self.m_pstatus_if, 1, wx.EXPAND |wx.ALL, 2 )				self.m_pstatus_bw = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_bw.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_bw.SetMaxSize( wx.Size( -1,11 ) )				bSizer48172 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_bw_label = wx.StaticText( self.m_pstatus_bw, wx.ID_ANY, u"bw:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_bw_label.Wrap( -1 )		self.m_st_bw_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_bw_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_bw_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer48172.Add( self.m_st_bw_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_bw_val = wx.StaticText( self.m_pstatus_bw, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_bw_val.Wrap( -1 )		self.m_st_bw_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer48172.Add( self.m_st_bw_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_bw.SetSizer( bSizer48172 )		self.m_pstatus_bw.Layout()		sbSizer10.Add( self.m_pstatus_bw, 1, wx.EXPAND |wx.ALL, 2 )				self.m_pstatus_resol = wx.Panel( self.m_status_window, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,10 ), wx.TAB_TRAVERSAL )		self.m_pstatus_resol.SetMinSize( wx.Size( -1,10 ) )		self.m_pstatus_resol.SetMaxSize( wx.Size( -1,11 ) )				bSizer48173 = wx.BoxSizer( wx.HORIZONTAL )				self.m_st_resol_label = wx.StaticText( self.m_pstatus_resol, wx.ID_ANY, u"resol:", wx.DefaultPosition, wx.Size( 50,-1 ), wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_resol_label.Wrap( -1 )		self.m_st_resol_label.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )		self.m_st_resol_label.SetMinSize( wx.Size( 50,-1 ) )		self.m_st_resol_label.SetMaxSize( wx.Size( 50,-1 ) )				bSizer48173.Add( self.m_st_resol_label, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_st_resol_val = wx.StaticText( self.m_pstatus_resol, wx.ID_ANY, u"-- ", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT|wx.ST_NO_AUTORESIZE )		self.m_st_resol_val.Wrap( -1 )		self.m_st_resol_val.SetFont( wx.Font( 10, 70, 90, 90, False, wx.EmptyString ) )				bSizer48173.Add( self.m_st_resol_val, 0, wx.LEFT|wx.RIGHT, 2 )				self.m_pstatus_resol.SetSizer( bSizer48173 )		self.m_pstatus_resol.Layout()		sbSizer10.Add( self.m_pstatus_resol, 1, wx.EXPAND |wx.ALL, 2 )				self.m_status_window.SetSizer( sbSizer10 )		self.m_status_window.Layout()		bSizer10.Add( self.m_status_window, 1, wx.ALL|wx.EXPAND, 5 )				self.m_panel11.SetSizer( bSizer10 )		self.m_panel11.Layout()		bSizer10.Fit( self.m_panel11 )		self.m_panel12 = wx.Panel( self.m_splitter10, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		bSizer11 = wx.BoxSizer( wx.HORIZONTAL )				self.m_panel37 = wx.Panel( self.m_panel12, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		bSizer11.Add( self.m_panel37, 1, wx.EXPAND |wx.ALL, 5 )				self.m_panel_webcam_container = wx.Panel( self.m_panel12, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		bSizer23 = wx.BoxSizer( wx.VERTICAL )				self.m_panel_webcam = WebcamPanel( self.m_panel_webcam_container, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, wx.TAB_TRAVERSAL )		self.m_panel_webcam.SetBackgroundColour( wx.Colour( 142, 142, 142 ) )				bSizer23.Add( self.m_panel_webcam, 1, wx.EXPAND, 0 )				self.m_panel_webcam_control = wx.Panel( self.m_panel_webcam_container, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,30 ), wx.RAISED_BORDER|wx.TAB_TRAVERSAL )		self.m_panel_webcam_control.SetMinSize( wx.Size( -1,30 ) )		self.m_panel_webcam_control.SetMaxSize( wx.Size( -1,30 ) )				bSizer24 = wx.BoxSizer( wx.HORIZONTAL )				self.m_webcam_toggle = wx.ToggleButton( self.m_panel_webcam_control, wx.ID_ANY, u"Enable", wx.DefaultPosition, wx.DefaultSize, 0 )		bSizer24.Add( self.m_webcam_toggle, 0, wx.ALIGN_LEFT|wx.ALL, 5 )						bSizer24.AddSpacer( ( 0, 0), 1, wx.EXPAND, 5 )				self.m_bp_capture = wx.BitmapButton( self.m_panel_webcam_control, wx.ID_ANY, wx.Bitmap( u".resources/img/camera.png", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.DefaultSize, wx.BU_AUTODRAW )		bSizer24.Add( self.m_bp_capture, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )						bSizer24.AddSpacer( ( 0, 0), 1, wx.EXPAND, 5 )				self.m_button_webcam_hide = wx.Button( self.m_panel_webcam_control, wx.ID_ANY, u"Hide", wx.DefaultPosition, wx.DefaultSize, wx.BU_EXACTFIT )		bSizer24.Add( self.m_button_webcam_hide, 0, wx.ALIGN_RIGHT|wx.ALL, 5 )				self.m_panel_webcam_control.SetSizer( bSizer24 )		self.m_panel_webcam_control.Layout()		bSizer23.Add( self.m_panel_webcam_control, 1, wx.EXPAND |wx.ALL, 2 )				self.m_panel_webcam_container.SetSizer( bSizer23 )		self.m_panel_webcam_container.Layout()		bSizer23.Fit( self.m_panel_webcam_container )		bSizer11.Add( self.m_panel_webcam_container, 1, wx.EXPAND |wx.ALL, 5 )				self.m_panel12.SetSizer( bSizer11 )		self.m_panel12.Layout()		bSizer11.Fit( self.m_panel12 )		self.m_splitter10.SplitHorizontally( self.m_panel11, self.m_panel12, 0 )		bSizer2.Add( self.m_splitter10, 1, wx.EXPAND, 2 )				bSizer1.Add( bSizer2, 1, wx.EXPAND, 5 )				self.SetSizer( bSizer1 )		self.Layout()		self.m_menubar1 = wx.MenuBar( 0 )		self.m_file = wx.Menu()		self.m_file_quit = wx.MenuItem( self.m_file, wx.ID_ANY, u"Quit"+ u"\t" + u"CTRL+Q", u"quit the srtn control software", wx.ITEM_NORMAL )		self.m_file.AppendItem( self.m_file_quit )				self.m_menubar1.Append( self.m_file, u"File" ) 				self.m_view = wx.Menu()		self.m_view_windows = wx.Menu()		self.m_view_windows_log = wx.MenuItem( self.m_view_windows, wx.ID_ANY, u"Log Output", u"Show/Hide the Log Window", wx.ITEM_CHECK )		self.m_view_windows.AppendItem( self.m_view_windows_log )		self.m_view_windows_log.Check( True )				self.m_view_windows_skyview = wx.MenuItem( self.m_view_windows, wx.ID_ANY, u"Sky View", u"Show/Hide the Sky Map Window", wx.ITEM_CHECK )		self.m_view_windows.AppendItem( self.m_view_windows_skyview )		self.m_view_windows_skyview.Check( True )				self.m_view_windows_webcam = wx.MenuItem( self.m_view_windows, wx.ID_ANY, u"Webcam", u"Show/Hide the Webcam Window", wx.ITEM_CHECK )		self.m_view_windows.AppendItem( self.m_view_windows_webcam )		self.m_view_windows_webcam.Check( True )				self.m_view_windows_status = wx.MenuItem( self.m_view_windows, wx.ID_ANY, u"Status Area", u"Show/Hide the Status Area", wx.ITEM_CHECK )		self.m_view_windows.AppendItem( self.m_view_windows_status )		self.m_view_windows_status.Check( True )				self.m_view_windows_graph = wx.MenuItem( self.m_view_windows, wx.ID_ANY, u"Graphs", u"Show/View Graphs", wx.ITEM_CHECK )		self.m_view_windows.AppendItem( self.m_view_windows_graph )		self.m_view_windows_graph.Check( True )				self.m_view.AppendSubMenu( self.m_view_windows, u"Windows" )				self.m_view_status = wx.Menu()		self.m_view_status_location = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"Location", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_location )		self.m_view_status_location.Check( True )				self.m_view_status_cmd = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"Cmd", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_cmd )		self.m_view_status_cmd.Check( True )				self.m_view_status_azel = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"AzEl", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_azel )		self.m_view_status_azel.Check( True )				self.m_view_status_offsets = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"Offsets", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_offsets )		self.m_view_status_offsets.Check( True )				self.m_view_status_ra = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"RA", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_ra )		self.m_view_status_ra.Check( True )				self.m_view_status_time = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"Time", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_time )		self.m_view_status_time.Check( True )				self.m_view_status_source = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"Source", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_source )		self.m_view_status_source.Check( True )				self.m_view_status_vlsr = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"VLSR", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_vlsr )		self.m_view_status_vlsr.Check( True )				self.m_view_status_integ = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"Integral", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_integ )		self.m_view_status_integ.Check( True )				self.m_view_status_freq = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"Frequency", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_freq )		self.m_view_status_freq.Check( True )				self.m_view_status_if = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"I.F.", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_if )				self.m_view_status_bw = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"BW", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_bw )				self.m_view_status_resol = wx.MenuItem( self.m_view_status, wx.ID_ANY, u"Resolution", wx.EmptyString, wx.ITEM_CHECK )		self.m_view_status.AppendItem( self.m_view_status_resol )				self.m_view.AppendSubMenu( self.m_view_status, u"Status" )				self.m_view_theme = wx.Menu()		self.m_view_theme_default = wx.MenuItem( self.m_view_theme, wx.ID_ANY, u"Default", wx.EmptyString, wx.ITEM_RADIO )		self.m_view_theme.AppendItem( self.m_view_theme_default )		self.m_view_theme_default.Check( True )				self.m_view_theme_night = wx.MenuItem( self.m_view_theme, wx.ID_ANY, u"Night Mode", wx.EmptyString, wx.ITEM_RADIO )		self.m_view_theme.AppendItem( self.m_view_theme_night )				self.m_view.AppendSubMenu( self.m_view_theme, u"Themes" )				self.m_menubar1.Append( self.m_view, u"View" ) 				self.m_config = wx.Menu()		self.m_config_editconfig = wx.MenuItem( self.m_config, wx.ID_ANY, u"Edit Config File...", wx.EmptyString, wx.ITEM_NORMAL )		self.m_config.AppendItem( self.m_config_editconfig )				self.m_config_update = wx.Menu()		self.m_config_update_location = wx.Menu()		self.m_config_update_location_auto = wx.MenuItem( self.m_config_update_location, wx.ID_ANY, u"Auto Update", wx.EmptyString, wx.ITEM_NORMAL )		self.m_config_update_location.AppendItem( self.m_config_update_location_auto )				self.m_config_update_location_manual = wx.MenuItem( self.m_config_update_location, wx.ID_ANY, u"Manual...", wx.EmptyString, wx.ITEM_NORMAL )		self.m_config_update_location.AppendItem( self.m_config_update_location_manual )				self.m_config_update.AppendSubMenu( self.m_config_update_location, u"Location" )				self.m_config.AppendSubMenu( self.m_config_update, u"Update" )				self.m_menubar1.Append( self.m_config, u"Configure" ) 				self.m_data = wx.Menu()		self.m_data_outformat = wx.Menu()		self.m_data_outformat_csv = wx.MenuItem( self.m_data_outformat, wx.ID_ANY, u"CSV", wx.EmptyString, wx.ITEM_RADIO )		self.m_data_outformat.AppendItem( self.m_data_outformat_csv )				self.m_data_outformat_JSON = wx.MenuItem( self.m_data_outformat, wx.ID_ANY, u"JSON", wx.EmptyString, wx.ITEM_RADIO )		self.m_data_outformat.AppendItem( self.m_data_outformat_JSON )				self.m_data_outformat_XML = wx.MenuItem( self.m_data_outformat, wx.ID_ANY, u"XML", wx.EmptyString, wx.ITEM_RADIO )		self.m_data_outformat.AppendItem( self.m_data_outformat_XML )				self.m_data.AppendSubMenu( self.m_data_outformat, u"Output Format" )				self.m_menubar1.Append( self.m_data, u"Data" ) 				self.m_help = wx.Menu()		self.m_help_updates = wx.MenuItem( self.m_help, wx.ID_ANY, u"Check for Updates...", wx.EmptyString, wx.ITEM_NORMAL )		self.m_help.AppendItem( self.m_help_updates )				self.m_help_documentation = wx.MenuItem( self.m_help, wx.ID_ANY, u"Documentation...", wx.EmptyString, wx.ITEM_NORMAL )		self.m_help.AppendItem( self.m_help_documentation )				self.m_menubar1.Append( self.m_help, u"Help" ) 				self.SetMenuBar( self.m_menubar1 )				self.m_toolBar1 = self.CreateToolBar( wx.TB_HORIZONTAL|wx.TB_TEXT, wx.ID_ANY ) 		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"Clear", wx.Bitmap( u".resources/img/CLEAR.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"Clear the screen", u"Clear the screen" ) 		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"Cancel", wx.Bitmap( u".resources/img/CANCEL.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"Cancel actions", u"Cancel current actions" ) 		self.m_toolBar1.AddSeparator()		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"Stow", wx.Bitmap( u".resources/img/STOW.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"Stow the telescope", u"Stow the telescope" ) 		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"AzEl", wx.Bitmap( u".resources/img/AZEL.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"Set Azimuth and Elevation", u"Set Azimuth and Elevation" ) 		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"NPoint", wx.Bitmap( u".resources/img/NPOINT.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"set npoint", u"set npoint" ) 		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"BeamSW", wx.Bitmap( u".resources/img/BEAMSW.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"set beamsw", u"set beamsw" ) 		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"Frequency", wx.Bitmap( u".resources/img/FREQ.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"set frequency", u"set frequency" ) 		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"Offset", wx.Bitmap( u".resources/img/OFFSET.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"set offset", u"set offset" ) 		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"Record", wx.Bitmap( u".resources/img/REC.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"record data", u"record data" ) 		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"Command", wx.Bitmap( u".resources/img/CMD.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"execute command file", u"execute command file" ) 		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"Calibrate", wx.Bitmap( u".resources/img/CAL.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"calibrate telescope", u"calibrate telescope" ) 		self.m_toolBar1.AddSeparator()		self.m_toolBar1.AddLabelTool( wx.ID_ANY, u"Configure", wx.Bitmap( u".resources/img/CONFIG.png", wx.BITMAP_TYPE_ANY ), wx.NullBitmap, wx.ITEM_NORMAL, u"Configure", u"Configure SRT" ) 		self.m_toolBar1.Realize()				self.m_statusBar2 = self.CreateStatusBar( 1, wx.ST_SIZEGRIP, wx.ID_ANY )				self.Centre( wx.BOTH )				# Connect Events		self.m_textCtrl3.Bind( wx.EVT_TEXT_ENTER, self.process_text_input )		self.m_webcam_toggle.Bind( wx.EVT_TOGGLEBUTTON, self.toggle_webcam )		self.m_bp_capture.Bind( wx.EVT_BUTTON, self.capture_webcam_image )		self.m_button_webcam_hide.Bind( wx.EVT_BUTTON, self.hide_webcam_panel )		self.Bind( wx.EVT_MENU, self.view_window_log, id = self.m_view_windows_log.GetId() )		self.Bind( wx.EVT_MENU, self.view_window_skyview, id = self.m_view_windows_skyview.GetId() )		self.Bind( wx.EVT_MENU, self.view_window_webcam, id = self.m_view_windows_webcam.GetId() )		self.Bind( wx.EVT_MENU, self.view_window_status, id = self.m_view_windows_status.GetId() )		self.Bind( wx.EVT_MENU, self.view_window_graph, id = self.m_view_windows_graph.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_location, id = self.m_view_status_location.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_cmd, id = self.m_view_status_cmd.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_azel, id = self.m_view_status_azel.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_offsets, id = self.m_view_status_offsets.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_ra, id = self.m_view_status_ra.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_time, id = self.m_view_status_time.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_source, id = self.m_view_status_source.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_vlsr, id = self.m_view_status_vlsr.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_integ, id = self.m_view_status_integ.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_freq, id = self.m_view_status_freq.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_if, id = self.m_view_status_if.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_bw, id = self.m_view_status_bw.GetId() )		self.Bind( wx.EVT_MENU, self.view_status_resol, id = self.m_view_status_resol.GetId() )		self.Bind( wx.EVT_MENU, self.set_theme_default, id = self.m_view_theme_default.GetId() )		self.Bind( wx.EVT_MENU, self.set_theme_night, id = self.m_view_theme_night.GetId() )		self.Bind( wx.EVT_TOOL, self.clear_tool_selected, id = wx.ID_ANY )		self.Bind( wx.EVT_TOOL, self.cancel_tool_selected, id = wx.ID_ANY )		self.Bind( wx.EVT_TOOL, self.stow_tool_selected, id = wx.ID_ANY )		self.Bind( wx.EVT_TOOL, self.azel_tool_selected, id = wx.ID_ANY )		self.Bind( wx.EVT_TOOL, self.npoint_tool_selected, id = wx.ID_ANY )		self.Bind( wx.EVT_TOOL, self.beamsw_tool_selected, id = wx.ID_ANY )		self.Bind( wx.EVT_TOOL, self.freq_tool_select, id = wx.ID_ANY )		self.Bind( wx.EVT_TOOL, self.offset_tool_select, id = wx.ID_ANY )		self.Bind( wx.EVT_TOOL, self.record_tool_select, id = wx.ID_ANY )		self.Bind( wx.EVT_TOOL, self.cmdfl_tool_select, id = wx.ID_ANY )		self.Bind( wx.EVT_TOOL, self.cal_tool_select, id = wx.ID_ANY )		self.Bind( wx.EVT_TOOL, self.config_tool_select, id = wx.ID_ANY )		def __del__( self ):		pass			# Virtual event handlers, overide them in your derived class	def process_text_input( self, event ):		event.Skip()		def toggle_webcam( self, event ):		event.Skip()		def capture_webcam_image( self, event ):		event.Skip()		def hide_webcam_panel( self, event ):		event.Skip()		def view_window_log( self, event ):		event.Skip()		def view_window_skyview( self, event ):		event.Skip()		def view_window_webcam( self, event ):		event.Skip()		def view_window_status( self, event ):		event.Skip()		def view_window_graph( self, event ):		event.Skip()		def view_status_location( self, event ):		event.Skip()		def view_status_cmd( self, event ):		event.Skip()		def view_status_azel( self, event ):		event.Skip()		def view_status_offsets( self, event ):		event.Skip()		def view_status_ra( self, event ):		event.Skip()		def view_status_time( self, event ):		event.Skip()		def view_status_source( self, event ):		event.Skip()		def view_status_vlsr( self, event ):		event.Skip()		def view_status_integ( self, event ):		event.Skip()		def view_status_freq( self, event ):		event.Skip()		def view_status_if( self, event ):		event.Skip()		def view_status_bw( self, event ):		event.Skip()		def view_status_resol( self, event ):		event.Skip()		def set_theme_default( self, event ):		event.Skip()		def set_theme_night( self, event ):		event.Skip()		def clear_tool_selected( self, event ):		event.Skip()		def cancel_tool_selected( self, event ):		event.Skip()		def stow_tool_selected( self, event ):		event.Skip()		def azel_tool_selected( self, event ):		event.Skip()		def npoint_tool_selected( self, event ):		event.Skip()		def beamsw_tool_selected( self, event ):		event.Skip()		def freq_tool_select( self, event ):		event.Skip()		def offset_tool_select( self, event ):		event.Skip()		def record_tool_select( self, event ):		event.Skip()		def cmdfl_tool_select( self, event ):		event.Skip()		def cal_tool_select( self, event ):		event.Skip()		def config_tool_select( self, event ):		event.Skip()		def m_splitter10OnIdle( self, event ):		self.m_splitter10.SetSashPosition( 0 )		self.m_splitter10.Unbind( wx.EVT_IDLE )	############################################################################# Class Properties###########################################################################class Properties ( wx.Frame ):		def __init__( self, parent ):		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = u"Properties", pos = wx.DefaultPosition, size = wx.Size( 400,550 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )				self.SetSizeHintsSz( wx.Size( 400,550 ), wx.Size( 400,550 ) )				self.m_statusBar3 = self.CreateStatusBar( 1, wx.ST_SIZEGRIP, wx.ID_ANY )		bSizer16 = wx.BoxSizer( wx.VERTICAL )				self.m_scrolledWindow2 = wx.ScrolledWindow( self, wx.ID_ANY, wx.DefaultPosition, wx.Size( -1,350 ), wx.HSCROLL|wx.VSCROLL )		self.m_scrolledWindow2.SetScrollRate( 5, 5 )		self.m_scrolledWindow2.SetMinSize( wx.Size( -1,450 ) )				bSizer11 = wx.BoxSizer( wx.VERTICAL )				sbSizer8 = wx.StaticBoxSizer( wx.StaticBox( self.m_scrolledWindow2, wx.ID_ANY, u"SRT Configuration" ), wx.VERTICAL )				gSizer4 = wx.GridSizer( 15, 2, 0, 0 )				self.m_staticText10 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Simulate Antenna", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText10.Wrap( -1 )		gSizer4.Add( self.m_staticText10, 0, wx.ALL, 5 )				bSizer12 = wx.BoxSizer( wx.HORIZONTAL )				self.m_radioBtn2 = wx.RadioButton( self.m_scrolledWindow2, wx.ID_ANY, u"On", wx.DefaultPosition, wx.DefaultSize, wx.RB_GROUP )		self.m_radioBtn2.SetValue( True ) 		bSizer12.Add( self.m_radioBtn2, 0, wx.ALL, 5 )				self.m_radioBtn3 = wx.RadioButton( self.m_scrolledWindow2, wx.ID_ANY, u"Off", wx.DefaultPosition, wx.DefaultSize, 0 )		bSizer12.Add( self.m_radioBtn3, 0, wx.ALL, 5 )				gSizer4.Add( bSizer12, 1, wx.EXPAND, 5 )				self.m_staticText11 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Simulate Receiver", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText11.Wrap( -1 )		gSizer4.Add( self.m_staticText11, 0, wx.ALL, 5 )				bSizer13 = wx.BoxSizer( wx.HORIZONTAL )				self.m_radioBtn4 = wx.RadioButton( self.m_scrolledWindow2, wx.ID_ANY, u"On", wx.DefaultPosition, wx.DefaultSize, wx.RB_GROUP )		self.m_radioBtn4.SetValue( True ) 		bSizer13.Add( self.m_radioBtn4, 0, wx.ALL, 5 )				self.m_radioBtn5 = wx.RadioButton( self.m_scrolledWindow2, wx.ID_ANY, u"Off", wx.DefaultPosition, wx.DefaultSize, 0 )		bSizer13.Add( self.m_radioBtn5, 0, wx.ALL, 5 )				gSizer4.Add( bSizer13, 1, wx.EXPAND, 5 )				self.m_staticText12 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Simulate FFT", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText12.Wrap( -1 )		gSizer4.Add( self.m_staticText12, 0, wx.ALL, 5 )				bSizer17 = wx.BoxSizer( wx.HORIZONTAL )				self.m_radioBtn6 = wx.RadioButton( self.m_scrolledWindow2, wx.ID_ANY, u"On", wx.DefaultPosition, wx.DefaultSize, wx.RB_GROUP )		self.m_radioBtn6.SetValue( True ) 		bSizer17.Add( self.m_radioBtn6, 0, wx.ALL, 5 )				self.m_radioBtn7 = wx.RadioButton( self.m_scrolledWindow2, wx.ID_ANY, u"Off", wx.DefaultPosition, wx.DefaultSize, 0 )		bSizer17.Add( self.m_radioBtn7, 0, wx.ALL, 5 )				gSizer4.Add( bSizer17, 1, wx.EXPAND, 5 )				self.m_staticText14 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Frequency", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText14.Wrap( -1 )		gSizer4.Add( self.m_staticText14, 0, wx.ALL, 5 )				self.m_textCtrl10 = wx.TextCtrl( self.m_scrolledWindow2, wx.ID_ANY, u"1420.4", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_textCtrl10.SetMaxLength( 8 ) 		gSizer4.Add( self.m_textCtrl10, 0, wx.ALL, 5 )				self.m_staticText15 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Num Frequency", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText15.Wrap( -1 )		gSizer4.Add( self.m_staticText15, 0, wx.ALL, 5 )				self.m_textCtrl11 = wx.TextCtrl( self.m_scrolledWindow2, wx.ID_ANY, u"256", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_textCtrl11.SetMaxLength( 8 ) 		gSizer4.Add( self.m_textCtrl11, 0, wx.ALL, 5 )				self.m_staticText16 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Calibration Mode", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText16.Wrap( -1 )		gSizer4.Add( self.m_staticText16, 0, wx.ALL, 5 )				m_choice1Choices = [ u"0", u"1", u"2", u"3", u"20" ]		self.m_choice1 = wx.Choice( self.m_scrolledWindow2, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_choice1Choices, 0 )		self.m_choice1.SetSelection( 2 )		gSizer4.Add( self.m_choice1, 0, wx.ALL, 5 )				self.m_staticText17 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Azimuth", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText17.Wrap( -1 )		gSizer4.Add( self.m_staticText17, 0, wx.ALL, 5 )				self.m_textCtrl12 = wx.TextCtrl( self.m_scrolledWindow2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_textCtrl12, 0, wx.ALL, 5 )				self.m_staticText18 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Elevation", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText18.Wrap( -1 )		gSizer4.Add( self.m_staticText18, 0, wx.ALL, 5 )				self.m_textCtrl13 = wx.TextCtrl( self.m_scrolledWindow2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_textCtrl13, 0, wx.ALL, 5 )				self.m_staticText19 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Azimuth Limits", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText19.Wrap( -1 )		gSizer4.Add( self.m_staticText19, 0, wx.ALL, 5 )				self.m_textCtrl14 = wx.TextCtrl( self.m_scrolledWindow2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_textCtrl14, 0, wx.ALL, 5 )				self.m_staticText20 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Elevation Limits", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText20.Wrap( -1 )		gSizer4.Add( self.m_staticText20, 0, wx.ALL, 5 )				self.m_textCtrl15 = wx.TextCtrl( self.m_scrolledWindow2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_textCtrl15, 0, wx.ALL, 5 )				self.m_staticText21 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Bandwidth", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText21.Wrap( -1 )		gSizer4.Add( self.m_staticText21, 0, wx.ALL, 5 )				self.m_textCtrl16 = wx.TextCtrl( self.m_scrolledWindow2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_textCtrl16, 0, wx.ALL, 5 )				self.m_staticText22 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"Beamwidth", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText22.Wrap( -1 )		gSizer4.Add( self.m_staticText22, 0, wx.ALL, 5 )				self.m_textCtrl17 = wx.TextCtrl( self.m_scrolledWindow2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_textCtrl17, 0, wx.ALL, 5 )				self.m_staticText23 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"System Temperature", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText23.Wrap( -1 )		gSizer4.Add( self.m_staticText23, 0, wx.ALL, 5 )				self.m_textCtrl18 = wx.TextCtrl( self.m_scrolledWindow2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_textCtrl18, 0, wx.ALL, 5 )				self.m_staticText24 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"TCAL", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText24.Wrap( -1 )		gSizer4.Add( self.m_staticText24, 0, wx.ALL, 5 )				self.m_textCtrl19 = wx.TextCtrl( self.m_scrolledWindow2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_textCtrl19, 0, wx.ALL, 5 )				self.m_staticText25 = wx.StaticText( self.m_scrolledWindow2, wx.ID_ANY, u"NBLOCK", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_LEFT )		self.m_staticText25.Wrap( -1 )		gSizer4.Add( self.m_staticText25, 0, wx.ALL, 5 )				self.m_textCtrl20 = wx.TextCtrl( self.m_scrolledWindow2, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer4.Add( self.m_textCtrl20, 0, wx.ALL, 5 )				sbSizer8.Add( gSizer4, 1, wx.EXPAND, 5 )				bSizer11.Add( sbSizer8, 1, wx.EXPAND, 5 )				self.m_scrolledWindow2.SetSizer( bSizer11 )		self.m_scrolledWindow2.Layout()		bSizer16.Add( self.m_scrolledWindow2, 1, wx.ALL|wx.EXPAND, 5 )				m_sdbSizer7 = wx.StdDialogButtonSizer()		self.m_sdbSizer7OK = wx.Button( self, wx.ID_OK )		m_sdbSizer7.AddButton( self.m_sdbSizer7OK )		self.m_sdbSizer7Apply = wx.Button( self, wx.ID_APPLY )		m_sdbSizer7.AddButton( self.m_sdbSizer7Apply )		self.m_sdbSizer7Cancel = wx.Button( self, wx.ID_CANCEL )		m_sdbSizer7.AddButton( self.m_sdbSizer7Cancel )		m_sdbSizer7.Realize();		m_sdbSizer7.SetMinSize( wx.Size( -1,50 ) ) 		bSizer16.Add( m_sdbSizer7, 1, wx.ALIGN_BOTTOM|wx.EXPAND, 5 )				self.SetSizer( bSizer16 )		self.Layout()				self.Centre( wx.BOTH )		def __del__( self ):		pass	